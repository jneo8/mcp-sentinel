# MCP Sentinel Configuration - Example
debug: true
log-level: debug

# MCP Servers - External services for incident response
mcp-servers:
  - name: k8s-mcp
    server-url: "http://localhost:8080/mcp"
    default-allowed-tools:
      - pods_get
      - pods_list
      - namespaces_list
      - events_list

# Resources - Single source of truth
resources:
  - name: kube-pod-not-ready
    type: prometheus_alert
    filters:
      alertname: "KubePodNotReady"

# Watchers - Produce notifications for specific resources
watchers:
  - type: prometheus
    name: cos-prometheus
    endpoint: "http://YOUR_PROMETHEUS_HOST/api/v1"
    poll-interval: "5s"
    resources:
      - kube-pod-not-ready

# Incident Cards - Listen to specific resources
incident-cards:
  - name: kube-pod-not-ready-alert
    resource: kube-pod-not-ready
    max-iterations: 12
    prompt: |
      KUBEPODNOTREADY ALERT INVESTIGATION:
      Alert: ${resource_name}
      Resource: ${resource_type}
      State: ${resource_state}
      Labels: ${resource_labels}

      GOAL: Confirm pod readiness issues and collect diagnostics via the Kubernetes MCP server.

      REQUIRED STEPS:
      1. Use k8s-mcp.namespaces_list to verify cluster connectivity
      2. Use k8s-mcp.pods_list to list pods in the affected namespace
      3. Use k8s-mcp.pods_get to get detailed pod information
      4. Use k8s-mcp.events_list to check for related events
      5. Summarise why the pod is not ready and recommend next remediation steps.

      Return a concise summary covering pod phase, container statuses, and suggested actions.
    tools:
      - k8s-mcp.pods_get
      - k8s-mcp.pods_list
      - k8s-mcp.namespaces_list
      - k8s-mcp.events_list
